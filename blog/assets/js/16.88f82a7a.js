(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{198:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[e._v("#")]),e._v(" docker")]),e._v(" "),a("h3",{attrs:{id:"设置docker-开机自启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置docker-开机自启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 设置docker 开机自启动")]),e._v(" "),a("ul",[a("li",[e._v("查看已启动的服务 "),a("code",[e._v("systemctl list-units --type=service")])]),e._v(" "),a("li",[e._v("查看是否设置开机启动 "),a("code",[e._v("systemctl list-unit-files | grep enable")])]),e._v(" "),a("li",[e._v("设置开机启动 "),a("code",[e._v("systemctl enable docker.service")])]),e._v(" "),a("li",[e._v("关闭开机启动 "),a("code",[e._v("systemctl disable docker.service")])])]),e._v(" "),a("h3",{attrs:{id:"设置docker容器自动启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置docker容器自动启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 设置docker容器自动启动")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("启动时加--restart=always")]),e._v(" "),a("blockquote",[a("p",[e._v("示例： docker run -tid --name isaler_v0.0.11 -p 8081:8080 --restart=always -v /alidata/iDocker/run/projectImages/isaler/v0.0.11/log:/usr/local/tomcat/logs isaler_v0.0.11")])])]),e._v(" "),a("li",[a("p",[e._v("如果已经启动的项目，则使用update更新："),a("code",[e._v("docker update --restart=always isaler_v0.0.11 always后边跟容器的ID 或名称")])])])]),e._v(" "),a("blockquote",[a("p",[e._v("restart 的值\nFlag\tDescription\nno\t\t不自动重启容器. (默认value)\non-failure \t容器发生error而退出(容器退出状态不为0)重启容器\nunless-stopped \t在容器已经stop掉或Docker stoped/restarted的时候才重启容器\nalways \t在容器已经stop掉或Docker stoped/restarted的时候才重启容器")])]),e._v(" "),a("h4",{attrs:{id:"docker常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" docker常用命令")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" docker ps # 查看当前正在运行的容器\n docker ps -a # 查看所有容器的状态\n docker start/stop id/name # 启动/停止某个容器\n docker attach id # 进入某个容器(使用exit退出后容器也跟着停止运行)\n docker exec -ti id # 启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）\n docker images # 查看本地镜像\n docker rm id/name # 删除某个容器\n docker rmi id/name # 删除某个镜像\n docker run --name test -ti ubuntu /bin/bash  # 复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash\n docker build -t soar/centos:7.1 # 通过当前目录下的Dockerfile创建一个名为soar/centos:7.1的镜像\n docker run -d -p 2222:22 --name test soar/centos:7.1  # 以镜像soar/centos:7.1创建名为test的容器，并以后台模式运行，并做端口映射到宿主机2222端口，P参数重启容器宿主机端口会发生改变\n")])])]),a("h3",{attrs:{id:"docker-三要素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-三要素","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 三要素")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("仓库")]),e._v(" "),a("blockquote",[a("p",[e._v("放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓储中拉下来就可以了")])])]),e._v(" "),a("li",[a("p",[e._v("镜像")]),e._v(" "),a("blockquote",[a("p",[e._v("image 文件生成的容器实例，本身也是一个文件， 称为镜像文件")])])]),e._v(" "),a("li",[a("p",[e._v("容器")]),e._v(" "),a("blockquote",[a("p",[e._v("一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器")])])])]),e._v(" "),a("h3",{attrs:{id:"安装docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装docker","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装docker")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("CentOs 7.X 安装")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("首选查看linux的版本 执行 "),a("code",[e._v("cat /etc/redhat-release")]),e._v("命令")])]),e._v(" "),a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root]# cat /etc/redhat-release\nCentOS Linux release 7.6.1810 (Core)\n")])])])]),e._v(" "),a("li",[a("p",[e._v("yum 安装")]),e._v(" "),a("ul",[a("li",[e._v("yum -y install gcc")]),e._v(" "),a("li",[e._v("yum -y install gcc- c++")])])]),e._v(" "),a("li",[a("p",[e._v("卸载旧版本")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("安装docker 依赖包")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("修改下载源(设置yum源) 也可以使用国内的阿里云源")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("更新yum软件包索引")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum makecache fast\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("安装docker")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum -y install docker-ce\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("启动docker")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("systemctl start docker\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("开机自启动 "),a("code",[e._v("systemctl enable docker.service")])])]),e._v(" "),a("li",[a("p",[e._v("检测是否安装成功")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docekr version\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("修改centos7 的镜像地址（镜像加速配置）")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("/etc/docker/daemon.json  (如果没有这个文件就创建这个文件)")])]),e._v(" "),a("li",[a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://t4pbff1n.mirror.aliyuncs.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 阿里云或网易云加速镜像地址")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("systemctl daemon-reload  重新加载daemon")])]),e._v(" "),a("li",[a("p",[e._v("systemctl restart docker  重启 docker")])]),e._v(" "),a("li",[a("p",[e._v("检测是否加速成功")])]),e._v(" "),a("li",[a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ps -ef|grep docker|grep -v grep\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("卸载docker")]),e._v(" "),a("ul",[a("li",[e._v("systemctl stop docker  停止docker")]),e._v(" "),a("li",[e._v("yum -y remove docker-ce 卸载docker")]),e._v(" "),a("li",[e._v("rm -rf /var/lib/docker 删除镜像文件")])])])])])])])},[],!1,null,null,null);t.default=r.exports}}]);